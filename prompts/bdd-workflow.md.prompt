# Public-Tunnel BDD 開發工作流程提示詞

## 專案背景
你正在協助開發 public-tunnel 專案，這是一個為 AI 助手設計的網路隧道解決方案。系統採用 BDD (Behavior Driven Development) 方法，使用 pytest-bdd 進行測試驅動開發。

## 必讀文件
請先使用 Read tool 載入以下關鍵文件：
1. `docs/requirements/02_user_story.md` - 包含所有 User Stories (US-001 到 US-022)
2. `conftest.py` - BDD ScenarioContext 架構和測試設定
3. `tests/features/` 目錄 - 現有的 feature files 和測試結構

## 開發工作流程

### Phase 1: User Story 到 BDD Test Walking Skeleton
使用獨立的提示詞進行：`@prompts/user-story-to-bdd-skeleton.md.prompt`

這個階段包含：
- User Story 選擇和分析
- Feature File 轉換（含命名規則）
- Test Walking Skeleton 建立
- 測試發現驗證

### Phase 2: TDD 實作循環

## 核心架構原則

### Session-Based 隔離
- 所有 API 端點格式：`/api/sessions/{session_id}/...`
- 測試中使用固定的 session_id（如 "test-session"）
- 不同測試間確保 session 隔離

### HTTP-Only 通訊
- 只使用 HTTP，不使用 WebSocket
- 所有 API 呼叫通過 `context.test_client`
- Client polling 也通過 HTTP API 模擬

### BDD Phase 管理
- GIVEN: 自動設定為 GIVEN phase，負責測試資料準備
- WHEN: 明確設定 `context.phase = BDDPhase.WHEN`，執行被測試的動作
- THEN: 明確設定 `context.phase = BDDPhase.THEN`，進行結果驗證

## 常用 API 端點模式

基於 User Stories，預期的 API 端點包括：
```python
# Session 管理
GET /api/sessions  # Admin only
GET /api/sessions/{session_id}/clients

# 指令執行
POST /api/sessions/{session_id}/commands
GET /api/sessions/{session_id}/commands/{command_id}
GET /api/sessions/{session_id}/poll  # Client polling

# 檔案管理
POST /api/sessions/{session_id}/files
GET /api/sessions/{session_id}/files
GET /api/sessions/{session_id}/files/{file_id}

# 結果查詢
POST /api/sessions/{session_id}/results
GET /api/sessions/{session_id}/commands  # Command history
```

## 測試寫作指導原則

1. **Step Definitions 職責**：
   - 只包含 API 呼叫和基本驗證
   - 不包含商業邏輯實作
   - 使用 `context.test_client` 進行所有 HTTP 請求

2. **Context 使用**：
   - 使用 `context.response` 儲存 API 回應
   - 使用 `context.session_id` 等屬性管理測試狀態
   - 遵循 BDD Phase 轉換規則

3. **錯誤處理**：
   - 測試應涵蓋正常流程和錯誤情況
   - 驗證正確的 HTTP status codes
   - 檢查錯誤訊息格式

### Phase 2: API Skeleton 建立
使用獨立的提示詞進行：`@prompts/api-skeleton-creation.md.prompt`

這個階段包含：
- 根據 OOA 設計建立 API 端點結構
- 建立 Pydantic models (避免 primitive types)
- 在 `public_tunnel/web/` 建立模組化架構
- 更新 BDD tests 準備 Red-Green-Refactor 循環

### Phase 3: TDD 實作循環
完成 API Skeleton 後：
1. 選擇一個 scenario，移除 `@skip`
2. RED: 執行 `pytest -m wip` 確認測試失敗（從 API error 開始）
3. GREEN Stage 1: 實作最小可行的回應（假資料）
4. GREEN Stage 2: 實作真實商業邏輯
5. REFACTOR: 程式碼品質改善
6. 驗證 scenario 完成，選擇下一個 scenario

### Phase 4: 迭代循環
1. 驗證目前 scenario 完成
2. 選擇下一個 scenario 或 feature
3. 重複 Phase 3

## 成功標準

完整開發流程應達到：
- [ ] 所有 user story scenarios 通過 BDD 測試
- [ ] FastAPI 端點遵循 session-based 架構
- [ ] HTTP polling 通訊正確實作
- [ ] Session 隔離完全運作
- [ ] 測試與業務邏輯適當分離
- [ ] 系統準備好與 AI assistant 整合